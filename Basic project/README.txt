==========================================================

< 프로그램 실행 방법 및 게임 설명 >

APK 실행 후 게임 시작 버튼을 누르면 현재(마지막 플레이) 스테이지 정보 표시가 되며 캐릭터 업그레이드 또는 그냥 게임 진행 버튼 클릭 가능
-> 캐릭터 업그레이드 버튼 클릭 시, 가지고 있는 골드로 캐릭터 강화 가능
-> 진행 버튼 클릭 시, 해당 스테이지 게임 시작

몬스터를 처치할 때마다 골드 및 경험치가 쌓이고 일정 기본 몬스터 수를 죽이면 보스 몬스터 등장
이때, 마지막 공격을 한 캐릭터가 경험치 획득
경험치는 100을 채울 경우, 캐릭터의 레벨이 오르고 다시 0으로 초기화
캐릭터의 레벨이 오를 때마다, 공격력 및 HP가 +1 
보스 몬스터를 해치우면 스테이지가 끝나면서 다음 스테이지로 이동
다음 스테이지 시작 전, 다시 캐릭터 업그레이드 가능

스테이지가 높아질 수록 몬스터의 HP/공격력이 강화 (LV 변화)
스테이지 올라갈 때마다 몬스터한테서 얻는 코인 10% 증가
모든 캐릭터가 죽으면 해당 스테이지 실패 -> 골드 리셋은 안됨 -> 해당 스테이지 다시 시작
현재 스테이지는 제한없이 무한 스테이지
스테이지 올라갈 때마다 +5 기본 몬스터를 죽여야 보스 등장 (초기 1단계 : 10마리 -> 15마리 -> 20마리 ...)

+ 추가 및 일부 변경 사항
저장되는 게임 데이터 : 마지막 도달 스테이지 번호, 가지고 있는 코인, 각 캐릭터 별 강화 스탯 등
몬스터가 공격 당하면 공격 사거리 상관없이 공격한 캐릭터 추적 (그 전까지는 공격 사거리 내 캐릭터를 찾아서 순찰)
카메라 이동 기능 => 왼쪽 중단에 위치한 버튼을 통해 카메라가 따라다니는 캐릭터 변경 가능
오른쪽 상단 버튼들 => 게임 배속 기능 / 세팅 버튼 (소리 크기 제어 가능 / 해당 스테이지 retry 기능 / 게임 종료)

==========================================================

< 주요 구현 내용 >

1. GameManager.cs
- 게임 시작, 종료 관리
- 처음 게임 세팅 관리 (+저장 데이터 세팅)
- 스테이지 시작 및 종료 관리 (+게임 오버)
- 몬스터의 생성 주기 / 몬스터의 동시 생성 가능한 최대 수 / 캐릭터의 재생성 주기 변경 가능

2. CharactersController.cs
- 캐릭터 생성 관리
- 캐릭터 전멸에 대해 확인하고 관리

3. MonstersController.cs
- 몬스터 생성 및 죽음 관리
- 스테이지 별 보스 몬스터 생성 및 죽음 관리
- 스테이지별로 몬스터 관련 설정 세팅

4. SystemCanvas.cs
- 전체 UI 관련된 스크립트 관리
- panel 기본 기능을 가진 interface를 통해 한번에 관리 
- CharacterInfoPanel.cs : 캐릭터 상단 UI
- MonsterInfoPanel.cs : 몬스터 상단 UI
- BarSystem.cs : 자연스러운 HP/EXP UI 애니메이션 스크립트
- PlayerInfoPanel.cs : player 골드, 게임 세팅 버튼 등 UI
- StatUpPanel.cs : 캐릭터 강화 관련 시스템 UI 
- TitlePanel.cs : 처음 게임 시작 화면
- StagePanel.cs : 각 스테이지 시작 전 표시 UI
- ButtonEffect.cs : 버튼 이펙터 관련 스크립트로 CBD 방식 구현
- SettingPanel.cs : 게임 master, bgm, sfx 소리 크기 관리 및 게임 retry, 게임 종료 UI 

5. GameSoundManager.cs
- 전체 게임 사운드 (SFX, BGM) 관리

6. SystemData.cs
- 주요 게임 데이터를 한눈에 볼 수 있도록 관리

7. Character
- 기본적인 큰 틀이 되는 Character.cs 구현 (추적, 일반 공격, 죽음 및 재생성, 애니메이션 등)
- 각 캐릭터는 위 Character 를 상속받아서 특징별로 다른 부분만 변화 (스탯, 특수 스킬 기술, 강화, 리셋) (Archer.cs / Knight.cs / Priest.cs / Thief.cs )
- 힐러 같은 경우, HP 손실이 있고 제일 HP가 적은 캐릭터를 찾아서 힐 시전 (+ 회복치는 캐릭터 최대 HP 를 넘지는 않음)

8. Monster
- 기본적인 큰 틀이 되는 Monster.cs 구현 (추적, 일반 공격, 죽음 및 애니메이션 등)
- 추후 다른 몬스터 생성을 고려하여 BasicMonster.cs 를 구현하여 기본 몬스터에 적용
- 보스 몬스터 경우, BasicMonster.cs 기반으로 크기를 키우고 스탯만 조정

9. SaveLoadManager.cs
- 게임을 끄고 켜도 데이터가 유지될 수록 있도록 저장 기능 구현
- 저장 데이터 : 현재 스테이지, 코인, 각 캐릭터 강화 수치 등

10. PlayerController.cs
- 코인과 같은 플레이어한테 중요한 데이터 관리

11. 추가 구현
- 가산점 항목 구현(레벨업, UI, 성장 및 강화 시스템, 스테이지 시스템, 보스 몬스터, 몬스터 강화, 빌드, 스킬 이펙트 - 각 직업 별 특수 스킬 쓸 때, 해당 캐릭터 위에 이펙터 발생(연기, 빛 등))
- 처음 게임 시작 화면
- 캐릭터 이동 방향에 따른 자연스러운 이동 (이미지 반전)
- HP, EXP 등 감소 및 회복 등 자연스러운 인지를 위한 UI 애니메이션 구현
- 게임 데이터 저장 기능
- 버튼 이펙터 추가
- bgm, sfx 사운드 기능 추가 (배경음, 평타, 각 직업별 스킬음, 일부 UI 클릭음, 게임오버 및 게임 성공, 레벨 업 등)
- 게임 배속 기능 추가 
- 카메라 이동 기능 => 왼쪽 중단에 위치한 버튼을 통해 카메라가 따라다니는 캐릭터 변경 가능
- 게임 세팅 버튼 (master, sfx, bgm 소리 조절 및 데이터 유지 / 현재 스테이지 재시작 버튼 / 게임 종료 버튼)
- 캐릭터 레벨과 강화에 따른 스탯 변화 
